% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multi_geo_acs.R
\name{multi_geo_acs}
\alias{multi_geo_acs}
\title{Fetch an ACS table with multiple geography levels}
\usage{
multi_geo_acs(
  table,
  year = 2019,
  towns = NULL,
  regions = NULL,
  counties = "all",
  state = Sys.getenv("STATE_FIPS_CODE"),
  neighborhoods = NULL,
  tracts = NULL,
  blockgroups = NULL,
  msa = NULL,
  us = FALSE,
  name = name,
  geoid = geoid,
  weight = weight,
  survey = "acs5",
  verbose = TRUE,
  key = NULL
)
}
\arguments{
\item{table}{A string giving the ACS table number.}

\item{year}{The year of the ACS table; currently defaults 2019 (most recent available).}

\item{towns}{A character vector of names of towns to include; \code{"all"} for all towns optionally filtered by county; or \code{NULL} (default) to not fetch town-level table.}

\item{regions}{A named list of regions with their town names (defaults \code{NULL}).}

\item{counties}{A character vector of names of counties to include; \code{"all"} (default) for all counties in the state; or \code{NULL} to not fetch county-level table.}

\item{state}{A string: either name or two-digit FIPS code of a US state. Required; defaults \code{Sys.getenv("STATE_FIPS_CODE")}. Set default to Connecticut with \code{Sys.setenv("STATE_FIPS_CODE" = "09")}.}

\item{neighborhoods}{A data frame with columns for neighborhood name, GEOID of either tracts or block groups, and weight, e.g. share of each tract assigned to a neighborhood. If included, weighted sums and MOEs will be returned for neighborhoods.}

\item{tracts}{A character vector of 11-digit FIPS codes of tracts to include, or \code{"all"} for all tracts optionally filtered by county. Defaults \code{NULL}.}

\item{blockgroups}{A character vector of 12-digit FIPS codes of block groups to include, or \code{"all"} for all block groups optionally filtered by county. Defaults \code{NULL}.}

\item{msa}{A character vector with the name or GeoID of the metropolitan statistical area to include.}

\item{us}{Logical: whether to fetch US-level table. Defaults \code{FALSE}.}

\item{name}{Bare column name of neighborhood names. Only relevant if a neighborhood weight table is being used. Defaults \code{name} to match the neighborhood lookup datasets.}

\item{geoid}{Bare column name of neighborhood GEOIDs, either tracts or block groups. Only relevant if a neighborhood weight table is being used. Defaults \code{geoid} to match the neighborhood lookup datasets.}

\item{weight}{Bare column name of weights between neighborhood names and tract/block groups. Only relevant if a neighborhood weight table is being used. Defaults \code{weight} to match the neighborhood lookup datasets.}

\item{survey}{A string: which ACS estimate to use. Defaults to 5-year (\code{"acs5"}), but can also be 1-year (\code{"acs1"}).}

\item{verbose}{Logical: whether to print summary of geographies included. Defaults \code{TRUE}.}

\item{key}{String: Census API key. If \code{NULL} (default), takes the value from \code{Sys.getenv("CENSUS_API_KEY")}.}
}
\value{
A tibble with GEOID, name, variable code, estimate, moe, geography level, state, and year, as applicable, for the chosen ACS table.
}
\description{
Fetch a data table from the ACS via \code{tidycensus} with your choice of geographies at multiple levels. For geographies made of aggregates, i.e. neighborhoods made of tracts or regions made of towns, the returned table will have estimates summed and margins of error calculated for the whole area.
}
\details{
This function essentially calls \code{tidycensus::get_acs()} multiple times, depending on geographic levels chosen, and does minor cleaning, filtering, and aggregation. Note that the underlying \code{tidycensus::get_acs()} requires a Census API key. As is the case with other \code{tidycensus} functions, \code{multi_geo_acs} assumes this key is stored as \code{CENSUS_API_KEY} in your \code{.Renviron}. See \code{\link[tidycensus:census_api_key]{tidycensus::census_api_key()}} for installation.
}
\examples{
\dontrun{
multi_geo_acs("B01003", 2018,
  towns = "all",
  regions = list(inner_ring = c("Hamden", "East Haven", "West Haven")),
  counties = "New Haven County",
  tracts = unique(nhv_tracts$geoid)
)

multi_geo_acs("B01003", 2018,
  towns = "Bridgeport",
  counties = "Fairfield County",
  neighborhoods = bridgeport_tracts
)
}
}
\seealso{
\code{\link[tidycensus:census_api_key]{tidycensus::census_api_key()}}, \code{\link[tidycensus:get_acs]{tidycensus::get_acs()}}
}
